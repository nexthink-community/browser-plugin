/*jslint browser:true*/
/*jslint devel:true*/
/*jslint regexp: true*/
/*global className, styles, deviceTables, setPopup, DOMParser, browser, chrome, finderLink, checkIfNeedToShowPopup*/

var mouseEvent, devicesName, k;

/*
* Add the data to the popup div, replace the older one
* @param actualDocument The document where to add the data (use to correctly display element in frame)
* @param display The display part generated by background
*/
function addDisplayElement(actualDocument, display) {
    "use strict";
    var dataPopup, displayNode;

    dataPopup = actualDocument.getElementById("dataPopup");
    displayNode = actualDocument.createElement('div');
    displayNode.innerHTML = display;
    displayNode = displayNode.childNodes[0];
    try { dataPopup.querySelector("#" + displayNode.id.replace(/\./g, "")).remove(); } catch (ignore) { }
    dataPopup.appendChild(displayNode);
}

/*
* Create the replacement element for the device name
* @param deviceName THe name of the device to replace
* @return A string for the remplacement element
*/
function createDeviceElement(deviceName) {
    "use strict";
    return '<span' + mouseEvent + ' class=\"' + className + styles + '\" id=\"' + deviceName.replace(/\./g, "") + '\" contenteditable="false">' + deviceName + '</span>';
}

/* Explore the node recursively and replace the device name by data box
* @param node The actual node
*/
function bodyExplorer(node) {
    "use strict";

    var divEditable, nodeID, elementText, name, newElement, i, splitArray;

    // Check if parent is not a previous box (prevent crash)
    divEditable = false;
    nodeID = node.id;

    try {
        if (node.contentEditable !== null && node.contentEditable !== "inherit") { divEditable = node.contentEditable; }
    } catch (ignore) {}

    if (nodeID !== "preloadDiv" && node.getAttribute("autoid") !== "_lvv_7" && !node.classList.contains(className) && (!node.classList.contains("zA") && !node.classList.contains("yO"))) {
        if (nodeID !== "dataPopup" && node.tagName !== "BODY") {
            // Remove all the children text
            elementText = node.innerHTML.replace(new RegExp(/[\t\n\r]/, 'g'), ' ').replace(new RegExp(/,/, 'g'), ' ').replace(new RegExp(/<.*>/, 'g'), '').trim();
            try {
                if(divEditable) {
                  splitArray = node.firstChild.nodeValue.split(" ");
                  for (i = 0; i < splitArray.length; i++) {
                    var splitedPart = splitArray[i];
                    var deviceIndex = devicesName.indexOf(splitedPart);
                    node.value = deviceTables[deviceIndex][0];

                    // If device found then proceed to the editing
                    if (deviceIndex !== -1) {
                      if (!node.onmouseover && !node.onmouseout) {
                          node.onmouseover = function (e) { setPopup(e, node.ownerDocument); };
                          node.onmouseout = function (e) { checkIfNeedToShowPopup(e, node.ownerDocument); };
                          addDisplayElement(node.ownerDocument, deviceTables[deviceIndex][1]);
                      }
                    }
                  }
                }
                if ((node.value && devicesName.indexOf(node.value) !== -1)) {
                    if (!node.onmouseover && !node.onmouseout) {
                        node.onmouseover = function (e) { setPopup(e, node.ownerDocument); };
                        node.onmouseout = function (e) { checkIfNeedToShowPopup(e, node.ownerDocument); };
                        addDisplayElement(node.ownerDocument, deviceTables[devicesName.indexOf(node.value)][1]);
                    }
                }
            } catch (e) {console.log(e); }

            if(divEditable) return;
            // If element have text
            if (elementText !== "") {
                splitArray = elementText.split(" ");
                // Check each word
                splitArray.forEach(function (splitedPart) {
                    var parser, dom, deviceIndex, elementNewHTML, splitedElement, deviceName, elementToAdd, j, test;

                    parser = new DOMParser();
                    dom = parser.parseFromString(splitedPart, 'text/html');
                    splitedPart = dom.body.textContent.trim().replace(new RegExp(' ', 'g'), '');

                    deviceIndex = devicesName.indexOf(splitedPart);
                    // If device found then proceed to the editing
                    if (deviceIndex !== -1) {
                        try {
                            elementNewHTML = "";
                            splitedElement = node.innerHTML.split(devicesName[deviceIndex]);

                            deviceName = deviceTables[deviceIndex][0];
                            elementToAdd = createDeviceElement(deviceName);
                            if (node.nodeName === "TEXTAREA") return;

                            for (j = 0; j < splitedElement.length; j += 1) {
                                elementNewHTML += splitedElement[j];
                                if (j !== splitedElement.length - 1) {
                                    test = splitedElement[j].slice(splitedElement[j].length - 4);
                                    if (test !== '="x_' && test !== 'id="') {
                                        elementNewHTML += elementToAdd;
                                        addDisplayElement(node.ownerDocument, deviceTables[deviceIndex][1]);
                                    } else { elementNewHTML += deviceName; }
                                }
                            }
                            if (node.innerHTML !== elementNewHTML) { node.innerHTML = elementNewHTML; }
                        } catch (e) { console.log(e); }
                    }
                });
            }
        } else if (nodeID !== "dataPopup") {
            try {
                name = node.innerHTML.replace(new RegExp(/<.*>/, 'g'), '').trim();
                if (devicesName.contains(name)) {
                    newElement = createDeviceElement(name);
                    if (newElement !== node.outerHTML.replace(new RegExp('&amp;', 'g'), '&')) { node.outerHTML = newElement; }
                }
            } catch (ignore) { }
        }

        if (node.children.length !== 0 && !divEditable) { for (i = 0; i < node.children.length; i += 1) { bodyExplorer(node.children[i]); } }
    }
}

/*
* Create the popup with the data and the script for the selected document object
* @param actualDocument The document object where to create the elements
* @return The script element and the div element
*/
function createElementToAdd(actualDocument) {
    "use strict";
    var script, popupBox, elements, addElement, j;

    script = actualDocument.createElement('script');

    try {
        script.src = browser.extension.getURL("/inject/box.js");
    } catch (e) {
        script.src = chrome.extension.getURL("/inject/box.js");
    }

    popupBox = actualDocument.createElement("div");
    if (!finderLink) { popupBox.className = "noLink"; }
    popupBox.id = "dataPopup";

    elements = actualDocument.head.getElementsByTagName("script");
    addElement = true;
    for (j = 0; j < elements.length; j += 1) {
        if (elements[j].src === script.src) {
            addElement = false;
            break;
        }
    }

    if (addElement) {
        actualDocument.getElementsByTagName('head')[0].appendChild(script);
        actualDocument.body.appendChild(popupBox);
    }
}

/*
* Edit the content of all the frames/iframes in the list
* @param framesList The list of frame/iframe object
*/
function editFrameContent(framesList) {
    "use strict";
    var j, content;
    for (j = 0; j < framesList.length; j += 1) {
        try {
            createElementToAdd(framesList[j].contentWindow.document);
            content = framesList[j].contentWindow.document.body;
            bodyExplorer(content);
        } catch (e) { console.log(e); }
    }
}

mouseEvent = ' onmouseover="setPopup(event);" onmouseout="checkIfNeedToShowPopup(event)"';
devicesName = [];
for (k = 0; k < deviceTables.length; k += 1) { devicesName.push(deviceTables[k][0]); }

// Edit the content of all the frames and iframes
editFrameContent(document.getElementsByTagName("frame"));
editFrameContent(document.getElementsByTagName("iframe"));

// Page body
try {
    if (document.body.innerText !== "" && document.body.innerText !== null) {
        createElementToAdd(document);
        bodyExplorer(document.body);
    }
} catch (ignore) { /*console.log(e);*/ }
