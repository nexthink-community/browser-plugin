/*
* Create the replacement element for the device name
* @param deviceName THe name of the device to replace
* @return A string for the remplacement element
*/
function CreateElement(deviceName){
    return '<span'+mouseEvent+' class=\"'+className+styles+'\" id=\"'+deviceName+'\" contenteditable="false">' + deviceName + '</span>';
}

/*
* Add the data to the popup div, replace the older one
* @param actualDocument The document where to add the data (use to correctly display element in frame)
* @param display The display part generated by background
*/
function AddDisplayElement(actualDocument, display){
    var dataPopup = actualDocument.getElementById("dataPopup");
    var displayNode = actualDocument.createElement('div');
    displayNode.innerHTML = display;
    displayNode = displayNode.childNodes[0];
    try {
        dataPopup.querySelector("#"+displayNode.id).remove();
    } catch (e) { }
    dataPopup.appendChild(displayNode);
}

/* Explore the node recursively and replace the device name by data box
* @param node The actual node
*/
function BodyExplorer(node){
    // Check if parent is not a previous box (prevent crash)
    var divEditable = false;
    var nodeID = node.id;

    try {
        if (node.contentEditable!=null && node.contentEditable!="inherit"){
            divEditable = node.contentEditable;
        }
    } catch (e) {}

    if(nodeID!="preloadDiv" && !divEditable && node.getAttribute("autoid")!="_lvv_7"
        && !node.classList.contains(className) && (!node.classList.contains("zA") && !node.classList.contains("yO"))
    ){
        if(nodeID!="dataPopup" && node.tagName!="BODY"){
            // Remove all the children text
            var elementText = node.innerHTML.replace(new RegExp(/[\t\n\r]/, 'g'), ' ').replace(new RegExp(/,/, 'g'), ' ').replace(new RegExp(/<.*>/, 'g'), '').trim();
            try {
                if(node.value){
                    if(devicesName.indexOf(node.value)!=-1){
                        if(!node.onmouseover && !node.onmouseout){
                                node.onmouseover = function(e){(e, node.ownerDocument);}
                                node.onmouseout = function(e){CheckIfNeedToShowPopup(e, node.ownerDocument);}
                                AddDisplayElement(node.ownerDocument, deviceTables[devicesName.indexOf(node.value)][1]);
                            }
                        }
                }
            } catch (e) { console.log(e); }
            // If element have text
            if(elementText!=""){
                splitArray = elementText.split(" ");
                // Check each word
                splitArray.forEach(function(splitedPart) {

                    var parser = new DOMParser;
                    var dom = parser.parseFromString(splitedPart, 'text/html');
                    var splitedPart = dom.body.textContent.trim().replace(new RegExp(' ', 'g'), '');

                    var deviceNameIndex = devicesName.indexOf(splitedPart);
                    // If device found then proceed to the editing
                    if(deviceNameIndex!=-1){
                        try {
                            var elementNewHTML = "";
                            var splitedElement = node.innerHTML.split(devicesName[deviceNameIndex]);

                            var deviceName = deviceTables[deviceNameIndex][0];
                            var display = deviceTables[deviceNameIndex][1];
                            var newElement = CreateElement(deviceName);

                            for (var i = 0; i < splitedElement.length; i++) {
                                elementNewHTML += splitedElement[i];
                                if(i!=splitedElement.length-1){
                                    var test = splitedElement[i].slice(splitedElement[i].length-4);
                                    if(test!='="x_' && test!='id="'){
                                        elementNewHTML += newElement;
                                        AddDisplayElement(node.ownerDocument, display);
                                    }
                                    else {
                                        elementNewHTML += deviceName;
                                    }
                                }
                            }
                            if(node.innerHTML!=elementNewHTML)
                                node.innerHTML = elementNewHTML;
                        } catch (e) { console.log(e); }
                    }
                });
            }
        }
        else if(nodeID!="dataPopup"){
            try {
                deviceName = node.innerHTML.replace(new RegExp(/<.*>/, 'g'), '').trim();
                var deviceNameIndex = devicesName.indexOf(deviceName);
                var display = deviceTables[deviceNameIndex][1];
                var newElement = CreateElement(deviceName);
                if(newElement!=node.outerHTML.replace(new RegExp('&amp;', 'g'), '&')){
                    node.outerHTML = newElement;
                }
            } catch (e) { }
        }

        if(node.children.length!=0 && !divEditable){
            for (var i = 0; i < node.children.length; i++) {
                BodyExplorer(node.children[i]);
            }
        }
    }
}

/*
* Create the popup with the data and the script for the selected document object
* @param actualDocument The document object where to create the elements
* @return The script element and the div element
*/
function CreateElementToAdd(actualDocument){
    var script = actualDocument.createElement('script');

    try {
        script.src = browser.extension.getURL("/inject/box.js");
    } catch (e) {
        script.src = chrome.extension.getURL("/inject/box.js");
    }

    var popupBox = actualDocument.createElement("div");
    if (!finderLink)
        popupBox.className = "noLink";
    popupBox.id = "dataPopup";

    var img = actualDocument.createElement("img");
    popupBox.appendChild(img);
    try {
        var src = chrome.runtime.getURL('img/logo.png');
    } catch (e) {
        var src = browser.runtime.getURL('img/logo.png');
    }
    img.src = src;
    img.height = "13";
    img.id = "logo"

    var elements = actualDocument.head.getElementsByTagName("script");
    var addElement = true;
    for (var i = 0; i < elements.length; i++) {
        if (elements[i].src==script.src) {
            addElement = false;
            break;
        }
    }

    if (addElement) {
        actualDocument.getElementsByTagName('head')[0].appendChild(script);
        actualDocument.body.appendChild(popupBox);
    }
}

/*
* Edit the content of all the frames/iframes in the list
* @param framesList The list of frame/iframe object
* @param devicesName The list of device name to search
*/
function EditFrameContent(framesList, devicesName){
    for (var j = 0; j < framesList.length; j++) {
        try {
            CreateElementToAdd(framesList[j].contentWindow.document);
            var content = framesList[j].contentWindow.document.body;
            BodyExplorer(content);
        } catch (e) { /*console.log(e);*/ }
    }
}

var mouseEvent = ' onmouseover="(event);" onmouseout="CheckIfNeedToShowPopup(event)"';
var devicesName = [];
for (var i = 0; i < deviceTables.length; i++) { devicesName.push(deviceTables[i][0]); }

// Edit the content of all the frames and iframes
EditFrameContent(document.getElementsByTagName("frame"), devicesName);
EditFrameContent(document.getElementsByTagName("iframe"), devicesName);

// Page body
try {
    if(document.body.innerText!="" && document.body.innerText!=null){
        CreateElementToAdd(document);
        BodyExplorer(document.body);
    }
}
catch (e) { /*console.log(e);*/ }
